version: 2.1

orbs:
  node: circleci/node@5.0.1
  docker: circleci/docker@2.1.4
  heroku: circleci/heroku@2.0.0
  snyk: snyk/snyk@1.5.0

jobs:
  build1:
    docker:
      - image: cimg/node:16.10
    steps:
      - checkout
      - node/install-packages:
          pkg-manager: npm
      - run: |
          echo "Performing build..."

  test1:
    docker:
      - image: cimg/node:16.10
    steps:
      - checkout
      - node/install-packages:
          pkg-manager: npm
      - run: |
          echo "Running tests..."
          npm run test

  publish:
    executor: docker/docker
    # docker:
    #   - image: cimg/node:16.10
    steps:
      - setup_remote_docker
      - checkout
      - docker/check
      - docker/build:
          image: harshitcc/education-space
      - docker/push:
          image: harshitcc/education-space
      # - checkout
      # - setup_remote_docker:
      #     docker_layer_caching: true
      # - run: |
      #     TAG=0.0.1
      #     docker build -t $DOCKER_USER/circleci-demo-docker:$TAG .
      #     echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
      #     docker push $DOCKER_USER/circleci-demo-docker:$TAG

  deploy:
    docker:
      - image: cimg/node:16.10
    steps:
      - setup_remote_docker
      - heroku/install
      - checkout
      - run:
          name: Heroku Container Push
          command: |
            heroku container:login
            heroku stack:set container -a harshitcc-su-devops
            heroku container:push web -a harshitcc-su-devops
            heroku container:release web -a harshitcc-su-devops


  scan:
      docker:
          - image: cimg/node:16.10
      environment:
          IMAGE_NAME: harshitcc/education-space
      steps:
          - checkout
          - setup_remote_docker      
          - docker/check
          - run: docker build -t $IMAGE_NAME .
          - snyk/scan: |
              docker-image-name: $IMAGE_NAME
              severiity-threshold: high
              fail-on-issue: false

workflows:
  build-test-publish-deploy:
    when:
      not:
        equal: [ /^v.*/, << pipeline.git.tag >> ]
        # and:
        #   - equal: [ release, << pipeline.git.branch >> ]
        #   - equal: [ /^v.*/, << pipeline.git.tag >> ]
    jobs:
      - build1:
          filters:
            branches:
              only:
                - main
                - release
      - test1:
          requires:
            - build1
          filters:
            branches:
              only:
                - main
                - release
      - publish:
          # context: my_context
          requires:
            - test1
          filters:
            branches:
              only:
                - release
      # The scan job
      - scan:
          requires:
            - build1
          filters:
            branches:
              only: main      
      - deploy:
          requires:
            - publish
          filters:
            branches:
              only:
                - release

  build-test-publish-deploy-wTag:
    when:
      equal: [ /^v.*/, << pipeline.git.tag >> ]
      # and:
      #   - equal: [ release, << pipeline.git.branch >> ]
      #   - equal: [ /^v*/, << pipeline.git.tag >> ]
    jobs:
      - build1:
          filters:
            branches:
              only:
                - release
      - test1:
          requires:
            - build1
          filters:
            branches:
              only:
                - release
      - publish:
          # context: my_context
          requires:
            - test1
          filters:
            branches:
              only:
                - release
      - deploy:
          requires:
            - publish
          filters:
            branches:
              only:
                - release


#
#
#
# testing without using docker
# version: 2.1

# orbs:
#   node: circleci/node@5.0.1

# jobs:
#   build1:
#     executor: node/default
#     steps:
#       - checkout
#       - node/install-packages:
#           pkg-manager: npm
#       - run: |
#           echo "Installing dependencies..."
#           npm install

#   test1:
#     executor: node/default
#     steps:
#       - checkout
#       - node/install-packages:
#           pkg-manager: npm
#       - run: |
#           echo "Running tests..."
#           npm run test

#   publish:
#     executor: node/default
#     steps:
#       - checkout
#       - setup_remote_docker:
#           docker_layer_caching: true
#       - run: |
#           TAG=0.0.1
#           docker build -t $DOCKER_USER/circleci-demo-docker:$TAG .
#           echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
#           docker push $DOCKER_USER/circleci-demo-docker:$TAG

# workflows:
#   simple_workflow1:
#     jobs:
#       - build1
#       - test1:
#           requires:
#             - build1
#       - publish:
#           # context: my_context
#           requires:
#             - build1
#             - test1
